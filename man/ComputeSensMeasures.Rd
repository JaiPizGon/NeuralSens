% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ComputeSensMeasures.R
\name{ComputeSensMeasures}
\alias{ComputeSensMeasures}
\title{Plot sensitivities of a neural network model}
\usage{
ComputeSensMeasures(
  sens,
  sens_origin_layer = 1,
  sens_end_layer = "last",
  sens_origin_input = TRUE,
  sens_end_input = FALSE
)
}
\arguments{
\item{sens}{\code{SensAnalysisMLP} object created by \code{\link[NeuralSens]{SensAnalysisMLP}}.}

\item{sens_origin_layer}{\code{numeric} specifies the layer of neurons with
respect to which the derivative must be calculated. The input layer is
specified by 1 (default).}

\item{sens_end_layer}{\code{numeric} specifies the layer of neurons of which
the derivative is calculated. It may also be 'last' to specify the output
layer (default).}

\item{sens_origin_input}{\code{logical} specifies if the derivative must be
calculated with respect to the inputs (\code{TRUE}) or output
(\code{FALSE}) of the \code{sens_origin_layer} layer of the model. By
default is \code{TRUE}.}

\item{sens_end_input}{\code{logical} specifies if the derivative calculated
is of the output (\code{FALSE}) or from the input (\code{TRUE}) of the
\code{sens_end_layer} layer of the model. By default is \code{FALSE}.}
}
\value{
\code{SensAnalysisMLP} object with the sensitivities calculated
}
\description{
Function to plot the sensitivities created by \code{\link[NeuralSens]{SensAnalysisMLP}}.
}
\examples{
## Load data -------------------------------------------------------------------
data("DAILY_DEMAND_TR")
fdata <- DAILY_DEMAND_TR

## Parameters of the NNET ------------------------------------------------------
hidden_neurons <- 5
iters <- 250
decay <- 0.1

################################################################################
#########################  REGRESSION NNET #####################################
################################################################################
## Regression dataframe --------------------------------------------------------
# Scale the data
fdata.Reg.tr <- fdata[,2:ncol(fdata)]
fdata.Reg.tr[,3] <- fdata.Reg.tr[,3]/10
fdata.Reg.tr[,1] <- fdata.Reg.tr[,1]/1000

# Normalize the data for some models
preProc <- caret::preProcess(fdata.Reg.tr, method = c("center","scale"))
nntrData <- predict(preProc, fdata.Reg.tr)

#' ## TRAIN nnet NNET --------------------------------------------------------
# Create a formula to train NNET
form <- paste(names(fdata.Reg.tr)[2:ncol(fdata.Reg.tr)], collapse = " + ")
form <- formula(paste(names(fdata.Reg.tr)[1], form, sep = " ~ "))

set.seed(150)
nnetmod <- nnet::nnet(form,
                           data = nntrData,
                           linear.output = TRUE,
                           size = hidden_neurons,
                           decay = decay,
                           maxit = iters)
# Try SensAnalysisMLP
sens <- NeuralSens::SensAnalysisMLP(nnetmod, trData = nntrData, plot = FALSE)
# Calculate partial derivatives of output with respect to inputs of hidden layer
NeuralSens::ComputeSensMeasures(sens, 2, 3, TRUE, FALSE)
}
