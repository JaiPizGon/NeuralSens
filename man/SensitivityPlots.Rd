% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SensitivityPlots.R
\name{SensitivityPlots}
\alias{SensitivityPlots}
\title{Plot sensitivities of a neural network model}
\usage{
SensitivityPlots(sens = NULL, der = NULL, zoom = TRUE)
}
\arguments{
\item{sens}{\code{data.frame} with the sensitivities calculated by \code{\link[NeuralSens]{SensAnalysisMLP}} using \code{.rawSens = FALSE}.}

\item{der}{\code{matrix} or \code{array} with the sensitivities calculated by \code{\link[NeuralSens]{SensAnalysisMLP}} using \code{.rawSens = TRUE}.}

\item{zoom}{\code{logical} indicating if the distributions should be zoomed when there is any of them which is too tiny to be appreciated in the third plot.
\code{\link[ggforce]{facet_zoom}} function from \code{ggforce} package is required.}
}
\value{
Plots: \itemize{ \item Plot 1: colorful plot with the
  classification of the classes in a 2D map \item Plot 2: b/w plot with
  probability of the chosen class in a 2D map \item Plot 3: plot with the
  stats::predictions of the data provided if param \code{dens} is not \code{NULL}}
}
\description{
Function to plot the sensitivities created by \code{\link[NeuralSens]{SensAnalysisMLP}}.
}
\details{
Due to the fact that \code{sens} is calculated from \code{dens}, if the latter is passed as argument
the argument \code{sens} is overwritten to maintain coherence between the three plots even. If only \code{sens} is
given, the last plot with the density plots of the inputs is not calculated.
}
\examples{
## Load data -------------------------------------------------------------------
data("DAILY_DEMAND_TR")
fdata <- DAILY_DEMAND_TR

## Parameters of the NNET ------------------------------------------------------
hidden_neurons <- 5
iters <- 250
decay <- 0.1

################################################################################
#########################  REGRESSION NNET #####################################
################################################################################
## Regression dataframe --------------------------------------------------------
# Scale the data
fdata.Reg.tr <- fdata[,2:ncol(fdata)]
fdata.Reg.tr[,3] <- fdata.Reg.tr[,3]/10
fdata.Reg.tr[,1] <- fdata.Reg.tr[,1]/1000

# Normalize the data for some models
preProc <- caret::preProcess(fdata.Reg.tr, method = c("center","scale"))
nntrData <- predict(preProc, fdata.Reg.tr)

#' ## TRAIN nnet NNET --------------------------------------------------------
# Create a formula to train NNET
form <- paste(names(fdata.Reg.tr)[2:ncol(fdata.Reg.tr)], collapse = " + ")
form <- formula(paste(names(fdata.Reg.tr)[1], form, sep = " ~ "))

set.seed(150)
nnetmod <- nnet::nnet(form,
                           data = nntrData,
                           linear.output = TRUE,
                           size = hidden_neurons,
                           decay = decay,
                           maxit = iters)
# Try SensAnalysisMLP
sens <- NeuralSens::SensAnalysisMLP(nnetmod, trData = nntrData, plot = FALSE)
NeuralSens::SensitivityPlots(sens)
sensraw <- NeuralSens::SensAnalysisMLP(nnetmod, trData = nntrData, plot = FALSE, .rawSens = TRUE)
NeuralSens::SensitivityPlots(der = sensraw[,,1])
}
